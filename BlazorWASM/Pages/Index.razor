@page "/"
@inject IJSRuntime JSRuntime;


<body style="width: 100%;">
    <div id="photos"></div>
    <div id='attachFile' style="background-color : blue;">
        <input type='file' id='fileName' style="width: 100%; height: 100px; font-size : 15px; text-align:center;" />
    </div>
    <button @onclick="ShortToast" style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info"> ShortToast</button>
    <button @onclick="LongToast"  style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info"> LongToast</button>
    <button @onclick="WebPopup"   style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info"> Popup</button>

    <button @onclick='CameraByDeviceRatio' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">CameraByDeviceRatio</button>
    <button @onclick='CameraByRatio' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">CameraByRatio</button>
    <button @onclick='PhotoByDeviceRatio' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">PhotoByDeviceRatio</button>
    <button @onclick='PhotoByRatio' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">PhotoByRatio</button>
    <button @onclick='MultiPhotoByDeviceRatio' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">MultiPhotoByDeviceRatio</button>
    <button @onclick='MultiPhotoByRatio' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">MultiPhotoByRatio</button>

    <button @onclick='Dialog' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">Dialog</button>
    <button @onclick='Location' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">Location</button>
    <button @onclick='Authentication' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">Authentication</button>
    <button @onclick='RootingCheck' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">RootingCheck</button>
    <button @onclick='Network' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">Network</button>
    <button @onclick='QRCodeScan' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">QRCodeScan</button>
    <button @onclick='NFCReading' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">NFC Reading</button>
    <button @onclick='SendSMS' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">SendSMS</button>
    <button @onclick='Notification' style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">Notification</button>
    <button @onclick='FileDownload'   style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info">FileDownload</button>
    <button @onclick="UniqueAppID"    style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info"> AppUUID</button>
    <button @onclick="UniqueDeviceID" style="width: 100%; height: 50px; font-size : 15px" class="btn btn-info"> UniqueDeviceID</button>
</body>
@code {
    private async Task ShortToast()
    {
        await CallFlexFunc<string>("Toast", new object[] { "짧은토스트", true });
    }
    private async Task LongToast()
    {
        await CallFlexFunc<string>("Toast", new object[] { "긴토스트", false });
    }
    private async Task WebPopup()
    {
        await CallFlexFunc<string>("WebPopup");
    }
    private async Task CameraByDeviceRatio()
    {
        await CallFlexFunc<string>("CameraByDeviceRatio");
    }
    private async Task CameraByRatio()
    {
        await CallFlexFunc<string>("CameraByRatio");
    }
    private async Task PhotoByDeviceRatio()
    {
        await CallFlexFunc<string>("PhotoByDeviceRatio");
    }
    private async Task PhotoByRatio()
    {
        await CallFlexFunc<string>("PhotoByRatio");
    }
    private async Task MultiPhotoByDeviceRatio()
    {
        await CallFlexFunc<string>("MultiPhotoByDeviceRatio");
    }
    private async Task MultiPhotoByRatio()
    {
        await CallFlexFunc<string>("MultiPhotoByRatio");
    }
    private async Task Dialog()
    {
        var returnValue = await CallFlexFunc<string>("Dialog");
        await CallFlexFunc<string>("Toast", new object[] { returnValue, true });
    }
    private async Task Location()
    {
        await CallFlexFunc<string>("Location");
    }
    private async Task Authentication()
    {
        var returnValue = await CallFlexFunc<string>("Authentication");
    }
    private async Task RootingCheck()
    {
        await CallFlexFunc<string>("RootingCheck");
    }
    private async Task Network()
    {
        await CallFlexFunc<string>("Network");
    }
    private async Task QRCodeScan()
    {
        await CallFlexFunc<string>("QRCodeScan");
    }
    private async Task NFCReading()
    {
        await CallFlexFunc<string>("NFCReading");
    }
    private async Task SendSMS()
    {
        await CallFlexFunc<string>("SendSMS");
    }
    private async Task Notification()
    {
        await CallFlexFunc<string>("Notification");
    }
    private async Task FileDownload()
    {
        await CallFlexFunc<string>("FileDownload");
    }

    private async Task UniqueAppID()
    {
        await CallFlexFunc<string>("UniqueAppID");
    }

    private async Task UniqueDeviceID()
    {
        await CallFlexFunc<string>("UniqueDeviceID");
    }

    private async Task<T> CallFlexFunc<T>(string funcNm, Array argument = null)
    {
        return await GetJsFunc<T>(funcNm, argument);
    }

    private Task<T> GetJsFunc<T>(string funcNm, Array arguments = null)
    {
        var tcs = new TaskCompletionSource<T>();
        var promiseHandler = DotNetObjectReference.Create<PromiseHandler<T>>(new PromiseHandler<T>() { tcs = tcs});
        JSRuntime.InvokeAsync<T>(funcNm, promiseHandler, arguments);
        return tcs.Task;
    }
    public class PromiseHandler<T>
    {
        public TaskCompletionSource<T> tcs { get; set; }
        public Array Arguments { get; set; }

        [JSInvokable]
        public void SetResult(T json)
        {
            tcs.SetResult(json);
        }
    }
}
