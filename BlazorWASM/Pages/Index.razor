@page "/"
@inject IJSRuntime JSRuntime;


    <body style="width: 100%;margin-bottom:10px;">
        <div class="form-group" id='attachFile' style="height:50px;margin:10px 10px 10px 10px">
            <input type='file' id='fileName' style="width: 100%;margin-bottom:10px; height: 50px; font-size : 15px; text-align:center;" />
        </div>
        <div style="width: 100%" class="btn-group-vertical">
            <button @onclick="ShortToast" style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary"> ShortToast</button>
            <button @onclick="LongToast" style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary"> LongToast</button>
            <button @onclick="WebPopup" style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary"> Popup</button>

            <button @onclick='CameraByDeviceRatio' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">CameraByDeviceRatio</button>
            <button @onclick='CameraByRatio' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">CameraByRatio</button>
            <button @onclick='PhotoByDeviceRatio' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">PhotoByDeviceRatio</button>
            <button @onclick='PhotoByRatio' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">PhotoByRatio</button>
            <button @onclick='MultiPhotoByDeviceRatio' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">MultiPhotoByDeviceRatio</button>
            <button @onclick='MultiPhotoByRatio' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">MultiPhotoByRatio</button>

            <button @onclick='Dialog' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">Dialog</button>
            <button @onclick='Location' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">Location</button>
            <button @onclick='Authentication' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">Authentication</button>
            <button @onclick='RootingCheck' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">RootingCheck</button>
            <button @onclick='Network' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">Network</button>
            <button @onclick='QRCodeScan' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">QRCodeScan</button>
            <button @onclick='NFCReading' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">NFC Reading</button>
            <button @onclick='SendSMS' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">SendSMS</button>
            <button @onclick='Notification' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">Notification</button>
            <button @onclick='FileDownload' style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary">FileDownload</button>
            <button @onclick="UniqueAppID" style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary"> AppUUID</button>
            <button @onclick="UniqueDeviceID" style="margin-bottom:10px;margin-left:10px;margin-right:10px" class="btn btn-outline-secondary"> UniqueDeviceID</button>
        </div>
        <div id="photos"></div>
    </body>
@code {
    private async Task ShortToast()
    {
        await CallFlexFunc<string>("Toast", new object[] { "짧은토스트", true });
    }
    private async Task LongToast()
    {
        await CallFlexFunc<string>("Toast", new object[] { "긴토스트", false });
    }
    private async Task WebPopup()
    {
        await CallFlexFunc<string>("WebPopup");
    }
    private async Task CameraByDeviceRatio()
    {
        await CallFlexFunc<string>("CameraByDeviceRatio");
    }
    private async Task CameraByRatio()
    {
        await CallFlexFunc<string>("CameraByRatio");
    }
    private async Task PhotoByDeviceRatio()
    {
        await CallFlexFunc<string>("PhotoByDeviceRatio");
    }
    private async Task PhotoByRatio()
    {
        await CallFlexFunc<string>("PhotoByRatio");
    }
    private async Task MultiPhotoByDeviceRatio()
    {
        await CallFlexFunc<string>("MultiPhotoByDeviceRatio");
    }
    private async Task MultiPhotoByRatio()
    {
        await CallFlexFunc<string>("MultiPhotoByRatio");
    }
    private async Task Dialog()
    {
        var returnValue = await CallFlexFunc<string>("Dialog");
        await CallFlexFunc<string>("Toast", new object[] { returnValue, true });
    }
    private async Task Location()
    {
        await CallFlexFunc<string>("Location");
    }
    private async Task Authentication()
    {
        var returnValue = await CallFlexFunc<string>("Authentication");
    }
    private async Task RootingCheck()
    {
        await CallFlexFunc<string>("RootingCheck");
    }
    private async Task Network()
    {
        await CallFlexFunc<string>("Network");
    }
    private async Task QRCodeScan()
    {
        await CallFlexFunc<string>("QRCodeScan");
    }
    private async Task NFCReading()
    {
        await CallFlexFunc<string>("NFCReading");
    }
    private async Task SendSMS()
    {
        await CallFlexFunc<string>("SendSMS");
    }
    private async Task Notification()
    {
        await CallFlexFunc<string>("Notification");
    }
    private async Task FileDownload()
    {
        await CallFlexFunc<string>("FileDownload");
    }

    private async Task UniqueAppID()
    {
        var returnValue = await CallFlexFunc<string>("UniqueAppID");
        await CallFlexFunc<string>("Toast", new object[] { returnValue, true });
    }

    private async Task UniqueDeviceID()
    {
        var returnValue = await CallFlexFunc<string>("UniqueDeviceID");
        await CallFlexFunc<string>("Toast", new object[] { returnValue, true });
    }

    private async Task<T> CallFlexFunc<T>(string funcNm, Array argument = null)
    {
        return await GetJsFunc<T>(funcNm, argument);
    }

    private Task<T> GetJsFunc<T>(string funcNm, Array arguments = null)
    {
        var tcs = new TaskCompletionSource<T>();
        var promiseHandler = DotNetObjectReference.Create<PromiseHandler<T>>(new PromiseHandler<T>() { tcs = tcs});
        JSRuntime.InvokeAsync<T>(funcNm, promiseHandler, arguments);
        return tcs.Task;
    }
    public class PromiseHandler<T>
    {
        public TaskCompletionSource<T> tcs { get; set; }
        public Array Arguments { get; set; }

        [JSInvokable]
        public void SetResult(T json)
        {
            tcs.SetResult(json);
        }
    }
}
